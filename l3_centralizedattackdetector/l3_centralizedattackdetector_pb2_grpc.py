# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import l3_centralizedattackdetector_pb2 as l3__centralizedattackdetector__pb2


class L3CentralizedattackdetectorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendInput = channel.stream_unary(
                '/L3Centralizedattackdetector/SendInput',
                request_serializer=l3__centralizedattackdetector__pb2.ModelInput.SerializeToString,
                response_deserializer=l3__centralizedattackdetector__pb2.Empty.FromString,
                )
        self.GetOutput = channel.unary_unary(
                '/L3Centralizedattackdetector/GetOutput',
                request_serializer=l3__centralizedattackdetector__pb2.Empty.SerializeToString,
                response_deserializer=l3__centralizedattackdetector__pb2.ModelOutput.FromString,
                )


class L3CentralizedattackdetectorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendInput(self, request_iterator, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOutput(self, request, context):
        """Sends another greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_L3CentralizedattackdetectorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendInput': grpc.stream_unary_rpc_method_handler(
                    servicer.SendInput,
                    request_deserializer=l3__centralizedattackdetector__pb2.ModelInput.FromString,
                    response_serializer=l3__centralizedattackdetector__pb2.Empty.SerializeToString,
            ),
            'GetOutput': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOutput,
                    request_deserializer=l3__centralizedattackdetector__pb2.Empty.FromString,
                    response_serializer=l3__centralizedattackdetector__pb2.ModelOutput.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'L3Centralizedattackdetector', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class L3Centralizedattackdetector(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendInput(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/L3Centralizedattackdetector/SendInput',
            l3__centralizedattackdetector__pb2.ModelInput.SerializeToString,
            l3__centralizedattackdetector__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOutput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/L3Centralizedattackdetector/GetOutput',
            l3__centralizedattackdetector__pb2.Empty.SerializeToString,
            l3__centralizedattackdetector__pb2.ModelOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
